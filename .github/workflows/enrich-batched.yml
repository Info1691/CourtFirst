name: Enrich URLs for cases (batched, polite)

on:
  workflow_dispatch:
    inputs:
      csv_path:
        description: Path to cases CSV
        required: true
        default: data/cases.csv
      batch_size:
        description: Rows per batch (excl. header)
        required: true
        default: "500"
      sleep_min:
        description: Min sleep seconds between queries
        required: true
        default: "2.0"
      sleep_max:
        description: Max sleep seconds between queries
        required: true
        default: "4.0"
      max_retries:
        description: Retries per URL lookup
        required: true
        default: "3"

jobs:
  make-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mkmatrix.outputs.matrix }}
      batches: ${{ steps.mkmatrix.outputs.batches }}
    steps:
      - uses: actions/checkout@v4

      - id: mkmatrix
        name: Build batch matrix from CSV
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = core.getInput('csv_path') || 'data/cases.csv';
            const batchSize = parseInt(core.getInput('batch_size') || '500', 10);

            if (!fs.existsSync(path)) {
              core.setFailed(`CSV not found at ${path}`);
              return;
            }
            // Count rows (minus header)
            const lines = fs.readFileSync(path, 'utf8').trim().split(/\r?\n/);
            const totalRows = Math.max(0, lines.length - 1);

            function makeRanges(total, size) {
              const out = [];
              let start = 1; // 1-based data row index (excluding header)
              while (start <= total) {
                const end = Math.min(total, start + size - 1);
                out.push({ start, end });
                start = end + 1;
              }
              return out;
            }

            const ranges = makeRanges(totalRows, batchSize);
            core.setOutput('matrix', JSON.stringify({ include: ranges }));
            core.setOutput('batches', String(ranges.length));
            core.notice(`Total data rows: ${totalRows}. Batches: ${ranges.length}.`);
          result-encoding: string
        env:
          csv_path: ${{ github.event.inputs.csv_path }}
          batch_size: ${{ github.event.inputs.batch_size }}

  enrich:
    runs-on: ubuntu-latest
    needs: make-matrix
    strategy:
      # run BATCHES SEQUENTIALLY to avoid rate limits
      max-parallel: 1
      matrix: ${{ fromJson(needs.make-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Enrich batch
        env:
          # pass inputs as env to keep CLI neat
          CSV_PATH: ${{ github.event.inputs.csv_path }}
          SLEEP_MIN: ${{ github.event.inputs.sleep_min }}
          SLEEP_MAX: ${{ github.event.inputs.sleep_max }}
          MAX_RETRIES: ${{ github.event.inputs.max_retries }}
        run: |
          echo "::group::Enrich batch ${{ matrix.start }}..${{ matrix.end }}"
          python tools/enrich_sources.py \
            --input "${CSV_PATH}" \
            --out   "${CSV_PATH}" \
            --start ${{ matrix.start }} \
            --end   ${{ matrix.end }} \
            --sleep-min "${SLEEP_MIN}" \
            --sleep-max "${SLEEP_MAX}" \
            --max-retries "${MAX_RETRIES}"
          echo "::endgroup::"

      - name: Commit updated CSV (batch ${{ matrix.start }}..${{ matrix.end }})
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Enrich URLs batch ${{ matrix.start }}â€“${{ matrix.end }}"
          file_pattern: ${{ github.event.inputs.csv_path }}
